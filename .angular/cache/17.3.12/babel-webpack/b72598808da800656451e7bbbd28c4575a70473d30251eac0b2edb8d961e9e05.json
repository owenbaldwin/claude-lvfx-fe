{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"@app/core/services/production.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"@angular/material/snack-bar\";\nimport * as i5 from \"@angular/common\";\nimport * as i6 from \"@angular/material/button\";\nimport * as i7 from \"@angular/material/datepicker\";\nimport * as i8 from \"@angular/material/form-field\";\nimport * as i9 from \"@angular/material/input\";\nimport * as i10 from \"@angular/material/progress-spinner\";\nimport * as i11 from \"@angular/material/select\";\nimport * as i12 from \"@angular/material/core\";\nfunction ProductionFormComponent_div_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 10);\n    i0.ɵɵelement(1, \"mat-spinner\", 11);\n    i0.ɵɵelementStart(2, \"p\", 12);\n    i0.ɵɵtext(3, \"Loading production data...\");\n    i0.ɵɵelementEnd()();\n  }\n}\nfunction ProductionFormComponent_div_7_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\", 13);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.error, \" \");\n  }\n}\nfunction ProductionFormComponent_form_8_mat_error_6_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-error\");\n    i0.ɵɵtext(1, \"Title is required\");\n    i0.ɵɵelementEnd();\n  }\n}\nfunction ProductionFormComponent_form_8_mat_option_17_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"mat-option\", 31);\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const option_r3 = ctx.$implicit;\n    i0.ɵɵproperty(\"value\", option_r3.value);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", option_r3.label, \" \");\n  }\n}\nfunction ProductionFormComponent_form_8_mat_spinner_39_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelement(0, \"mat-spinner\", 32);\n  }\n}\nfunction ProductionFormComponent_form_8_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r2 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"form\", 14);\n    i0.ɵɵlistener(\"ngSubmit\", function ProductionFormComponent_form_8_Template_form_ngSubmit_0_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.onSubmit());\n    });\n    i0.ɵɵelementStart(1, \"div\", 15)(2, \"mat-form-field\", 16)(3, \"mat-label\");\n    i0.ɵɵtext(4, \"Title\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"input\", 17);\n    i0.ɵɵtemplate(6, ProductionFormComponent_form_8_mat_error_6_Template, 2, 0, \"mat-error\", 18);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(7, \"div\", 15)(8, \"mat-form-field\", 16)(9, \"mat-label\");\n    i0.ɵɵtext(10, \"Description\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(11, \"textarea\", 19);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(12, \"div\", 15)(13, \"mat-form-field\", 16)(14, \"mat-label\");\n    i0.ɵɵtext(15, \"Status\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(16, \"mat-select\", 20);\n    i0.ɵɵtemplate(17, ProductionFormComponent_form_8_mat_option_17_Template, 2, 2, \"mat-option\", 21);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(18, \"div\", 22)(19, \"div\", 23)(20, \"mat-form-field\", 16)(21, \"mat-label\");\n    i0.ɵɵtext(22, \"Start Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(23, \"input\", 24)(24, \"mat-datepicker-toggle\", 25)(25, \"mat-datepicker\", null, 0);\n    i0.ɵɵelementEnd()();\n    i0.ɵɵelementStart(27, \"div\", 23)(28, \"mat-form-field\", 16)(29, \"mat-label\");\n    i0.ɵɵtext(30, \"End Date\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(31, \"input\", 26)(32, \"mat-datepicker-toggle\", 25)(33, \"mat-datepicker\", null, 1);\n    i0.ɵɵelementEnd()()();\n    i0.ɵɵelementStart(35, \"div\", 27)(36, \"button\", 28);\n    i0.ɵɵlistener(\"click\", function ProductionFormComponent_form_8_Template_button_click_36_listener() {\n      i0.ɵɵrestoreView(_r2);\n      const ctx_r0 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r0.cancel());\n    });\n    i0.ɵɵtext(37, \"Cancel\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(38, \"button\", 29);\n    i0.ɵɵtemplate(39, ProductionFormComponent_form_8_mat_spinner_39_Template, 1, 0, \"mat-spinner\", 30);\n    i0.ɵɵtext(40);\n    i0.ɵɵelementEnd()()();\n  }\n  if (rf & 2) {\n    let tmp_4_0;\n    const startDatePicker_r4 = i0.ɵɵreference(26);\n    const endDatePicker_r5 = i0.ɵɵreference(34);\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"formGroup\", ctx_r0.productionForm);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"ngIf\", (tmp_4_0 = ctx_r0.productionForm.get(\"title\")) == null ? null : tmp_4_0.errors == null ? null : tmp_4_0.errors[\"required\"]);\n    i0.ɵɵadvance(11);\n    i0.ɵɵproperty(\"ngForOf\", ctx_r0.statusOptions);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"matDatepicker\", startDatePicker_r4);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"for\", startDatePicker_r4);\n    i0.ɵɵadvance(7);\n    i0.ɵɵproperty(\"matDatepicker\", endDatePicker_r5);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"for\", endDatePicker_r5);\n    i0.ɵɵadvance(6);\n    i0.ɵɵproperty(\"disabled\", ctx_r0.productionForm.invalid || ctx_r0.submitting);\n    i0.ɵɵadvance();\n    i0.ɵɵproperty(\"ngIf\", ctx_r0.submitting);\n    i0.ɵɵadvance();\n    i0.ɵɵtextInterpolate1(\" \", ctx_r0.isEditMode ? \"Update\" : \"Create\", \" \");\n  }\n}\nexport class ProductionFormComponent {\n  constructor(fb, productionService, route, router, snackBar) {\n    this.fb = fb;\n    this.productionService = productionService;\n    this.route = route;\n    this.router = router;\n    this.snackBar = snackBar;\n    this.isEditMode = false;\n    this.productionId = null;\n    this.loading = false;\n    this.submitting = false;\n    this.error = '';\n    this.statusOptions = [{\n      value: 'development',\n      label: 'Development'\n    }, {\n      value: 'pre-production',\n      label: 'Pre-Production'\n    }, {\n      value: 'active',\n      label: 'Active'\n    }, {\n      value: 'post-production',\n      label: 'Post-Production'\n    }, {\n      value: 'completed',\n      label: 'Completed'\n    }, {\n      value: 'cancelled',\n      label: 'Cancelled'\n    }];\n  }\n  ngOnInit() {\n    this.initForm();\n    // Check if we're in edit mode by looking for an ID parameter\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id) {\n        this.isEditMode = true;\n        this.productionId = +id;\n        this.loadProductionData(+id);\n      }\n    });\n  }\n  initForm() {\n    this.productionForm = this.fb.group({\n      title: ['', [Validators.required]],\n      description: [''],\n      status: ['development', [Validators.required]],\n      startDate: [''],\n      endDate: ['']\n    });\n  }\n  loadProductionData(id) {\n    this.loading = true;\n    this.productionService.getProduction(id).subscribe({\n      next: production => {\n        // Patch form with existing data\n        this.productionForm.patchValue({\n          title: production.title,\n          description: production.description,\n          status: production.status,\n          startDate: production.startDate,\n          endDate: production.endDate\n        });\n        this.loading = false;\n      },\n      error: error => {\n        this.error = error.message || 'Failed to load production data';\n        this.loading = false;\n        this.snackBar.open(this.error, 'Close', {\n          duration: 5000,\n          panelClass: ['error-snackbar']\n        });\n      }\n    });\n  }\n  onSubmit() {\n    if (this.productionForm.invalid) {\n      return;\n    }\n    this.submitting = true;\n    const productionData = this.productionForm.value;\n    if (this.isEditMode && this.productionId) {\n      // Update existing production\n      this.productionService.updateProduction(this.productionId, productionData).subscribe({\n        next: updatedProduction => {\n          this.snackBar.open('Production updated successfully', 'Close', {\n            duration: 3000,\n            panelClass: ['success-snackbar']\n          });\n          this.router.navigate(['/productions', updatedProduction.id]);\n        },\n        error: error => {\n          this.handleSubmitError(error);\n        }\n      });\n    } else {\n      // Create new production\n      this.productionService.createProduction(productionData).subscribe({\n        next: newProduction => {\n          this.snackBar.open('Production created successfully', 'Close', {\n            duration: 3000,\n            panelClass: ['success-snackbar']\n          });\n          this.router.navigate(['/productions', newProduction.id]);\n        },\n        error: error => {\n          this.handleSubmitError(error);\n        }\n      });\n    }\n  }\n  handleSubmitError(error) {\n    this.submitting = false;\n    const message = error.error?.message || 'An error occurred while saving the production';\n    this.snackBar.open(message, 'Close', {\n      duration: 5000,\n      panelClass: ['error-snackbar']\n    });\n  }\n  cancel() {\n    if (this.isEditMode && this.productionId) {\n      this.router.navigate(['/productions', this.productionId]);\n    } else {\n      this.router.navigate(['/productions']);\n    }\n  }\n  static {\n    this.ɵfac = function ProductionFormComponent_Factory(t) {\n      return new (t || ProductionFormComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.ProductionService), i0.ɵɵdirectiveInject(i3.ActivatedRoute), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.MatSnackBar));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: ProductionFormComponent,\n      selectors: [[\"app-production-form\"]],\n      decls: 9,\n      vars: 4,\n      consts: [[\"startDatePicker\", \"\"], [\"endDatePicker\", \"\"], [1, \"container\", \"mt-4\"], [1, \"card\", \"shadow\"], [1, \"card-header\", \"bg-primary\", \"text-white\"], [1, \"mb-0\"], [1, \"card-body\"], [\"class\", \"text-center my-5\", 4, \"ngIf\"], [\"class\", \"alert alert-danger\", 4, \"ngIf\"], [3, \"formGroup\", \"ngSubmit\", 4, \"ngIf\"], [1, \"text-center\", \"my-5\"], [\"diameter\", \"50\", 1, \"mx-auto\"], [1, \"mt-3\"], [1, \"alert\", \"alert-danger\"], [3, \"ngSubmit\", \"formGroup\"], [1, \"mb-3\"], [\"appearance\", \"outline\", 1, \"w-100\"], [\"matInput\", \"\", \"formControlName\", \"title\", \"placeholder\", \"Production Title\", \"required\", \"\"], [4, \"ngIf\"], [\"matInput\", \"\", \"formControlName\", \"description\", \"placeholder\", \"Production description\", \"rows\", \"4\"], [\"formControlName\", \"status\", \"required\", \"\"], [3, \"value\", 4, \"ngFor\", \"ngForOf\"], [1, \"row\"], [1, \"col-md-6\", \"mb-3\"], [\"matInput\", \"\", \"formControlName\", \"startDate\", 3, \"matDatepicker\"], [\"matSuffix\", \"\", 3, \"for\"], [\"matInput\", \"\", \"formControlName\", \"endDate\", 3, \"matDatepicker\"], [1, \"d-flex\", \"justify-content-end\", \"gap-2\", \"mt-4\"], [\"mat-stroked-button\", \"\", \"type\", \"button\", 3, \"click\"], [\"mat-raised-button\", \"\", \"color\", \"primary\", \"type\", \"submit\", 3, \"disabled\"], [\"diameter\", \"20\", \"class\", \"me-2\", 4, \"ngIf\"], [3, \"value\"], [\"diameter\", \"20\", 1, \"me-2\"]],\n      template: function ProductionFormComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementStart(0, \"div\", 2)(1, \"div\", 3)(2, \"div\", 4)(3, \"h2\", 5);\n          i0.ɵɵtext(4);\n          i0.ɵɵelementEnd()();\n          i0.ɵɵelementStart(5, \"div\", 6);\n          i0.ɵɵtemplate(6, ProductionFormComponent_div_6_Template, 4, 0, \"div\", 7)(7, ProductionFormComponent_div_7_Template, 2, 1, \"div\", 8)(8, ProductionFormComponent_form_8_Template, 41, 10, \"form\", 9);\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance(4);\n          i0.ɵɵtextInterpolate1(\"\", ctx.isEditMode ? \"Edit\" : \"New\", \" Production\");\n          i0.ɵɵadvance(2);\n          i0.ɵɵproperty(\"ngIf\", ctx.loading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", ctx.error && !ctx.loading);\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"ngIf\", !ctx.loading);\n        }\n      },\n      dependencies: [i5.NgForOf, i5.NgIf, i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.FormGroupDirective, i1.FormControlName, i6.MatButton, i7.MatDatepicker, i7.MatDatepickerInput, i7.MatDatepickerToggle, i8.MatFormField, i8.MatLabel, i8.MatError, i8.MatSuffix, i9.MatInput, i10.MatProgressSpinner, i11.MatSelect, i12.MatOption],\n      styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n    });\n  }\n}","map":{"version":3,"names":["Validators","i0","ɵɵelementStart","ɵɵelement","ɵɵtext","ɵɵelementEnd","ɵɵadvance","ɵɵtextInterpolate1","ctx_r0","error","ɵɵproperty","option_r3","value","label","ɵɵlistener","ProductionFormComponent_form_8_Template_form_ngSubmit_0_listener","ɵɵrestoreView","_r2","ɵɵnextContext","ɵɵresetView","onSubmit","ɵɵtemplate","ProductionFormComponent_form_8_mat_error_6_Template","ProductionFormComponent_form_8_mat_option_17_Template","ProductionFormComponent_form_8_Template_button_click_36_listener","cancel","ProductionFormComponent_form_8_mat_spinner_39_Template","productionForm","tmp_4_0","get","errors","statusOptions","startDatePicker_r4","endDatePicker_r5","invalid","submitting","isEditMode","ProductionFormComponent","constructor","fb","productionService","route","router","snackBar","productionId","loading","ngOnInit","initForm","paramMap","subscribe","params","id","loadProductionData","group","title","required","description","status","startDate","endDate","getProduction","next","production","patchValue","message","open","duration","panelClass","productionData","updateProduction","updatedProduction","navigate","handleSubmitError","createProduction","newProduction","ɵɵdirectiveInject","i1","FormBuilder","i2","ProductionService","i3","ActivatedRoute","Router","i4","MatSnackBar","selectors","decls","vars","consts","template","ProductionFormComponent_Template","rf","ctx","ProductionFormComponent_div_6_Template","ProductionFormComponent_div_7_Template","ProductionFormComponent_form_8_Template"],"sources":["/Users/owenbaldwin/code/owenbaldwin2/claude-lvfx-fe/src/app/features/productions/production-form/production-form.component.ts","/Users/owenbaldwin/code/owenbaldwin2/claude-lvfx-fe/src/app/features/productions/production-form/production-form.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { ProductionService } from '@app/core/services/production.service';\nimport { Production } from '@app/shared/models';\n\n@Component({\n  selector: 'app-production-form',\n  templateUrl: './production-form.component.html',\n  styleUrls: ['./production-form.component.scss']\n})\nexport class ProductionFormComponent implements OnInit {\n  productionForm!: FormGroup;\n  isEditMode = false;\n  productionId: number | null = null;\n  loading = false;\n  submitting = false;\n  error = '';\n\n  statusOptions = [\n    { value: 'development', label: 'Development' },\n    { value: 'pre-production', label: 'Pre-Production' },\n    { value: 'active', label: 'Active' },\n    { value: 'post-production', label: 'Post-Production' },\n    { value: 'completed', label: 'Completed' },\n    { value: 'cancelled', label: 'Cancelled' }\n  ];\n\n  constructor(\n    private fb: FormBuilder,\n    private productionService: ProductionService,\n    private route: ActivatedRoute,\n    private router: Router,\n    private snackBar: MatSnackBar\n  ) { }\n\n  ngOnInit(): void {\n    this.initForm();\n    \n    // Check if we're in edit mode by looking for an ID parameter\n    this.route.paramMap.subscribe(params => {\n      const id = params.get('id');\n      if (id) {\n        this.isEditMode = true;\n        this.productionId = +id;\n        this.loadProductionData(+id);\n      }\n    });\n  }\n\n  initForm(): void {\n    this.productionForm = this.fb.group({\n      title: ['', [Validators.required]],\n      description: [''],\n      status: ['development', [Validators.required]],\n      startDate: [''],\n      endDate: ['']\n    });\n  }\n\n  loadProductionData(id: number): void {\n    this.loading = true;\n    this.productionService.getProduction(id).subscribe({\n      next: (production) => {\n        // Patch form with existing data\n        this.productionForm.patchValue({\n          title: production.title,\n          description: production.description,\n          status: production.status,\n          startDate: production.startDate,\n          endDate: production.endDate\n        });\n        this.loading = false;\n      },\n      error: (error) => {\n        this.error = error.message || 'Failed to load production data';\n        this.loading = false;\n        this.snackBar.open(this.error, 'Close', {\n          duration: 5000,\n          panelClass: ['error-snackbar']\n        });\n      }\n    });\n  }\n\n  onSubmit(): void {\n    if (this.productionForm.invalid) {\n      return;\n    }\n\n    this.submitting = true;\n    const productionData: Partial<Production> = this.productionForm.value;\n\n    if (this.isEditMode && this.productionId) {\n      // Update existing production\n      this.productionService.updateProduction(this.productionId, productionData)\n        .subscribe({\n          next: (updatedProduction) => {\n            this.snackBar.open('Production updated successfully', 'Close', {\n              duration: 3000,\n              panelClass: ['success-snackbar']\n            });\n            this.router.navigate(['/productions', updatedProduction.id]);\n          },\n          error: (error) => {\n            this.handleSubmitError(error);\n          }\n        });\n    } else {\n      // Create new production\n      this.productionService.createProduction(productionData)\n        .subscribe({\n          next: (newProduction) => {\n            this.snackBar.open('Production created successfully', 'Close', {\n              duration: 3000,\n              panelClass: ['success-snackbar']\n            });\n            this.router.navigate(['/productions', newProduction.id]);\n          },\n          error: (error) => {\n            this.handleSubmitError(error);\n          }\n        });\n    }\n  }\n\n  private handleSubmitError(error: any): void {\n    this.submitting = false;\n    const message = error.error?.message || 'An error occurred while saving the production';\n    this.snackBar.open(message, 'Close', {\n      duration: 5000,\n      panelClass: ['error-snackbar']\n    });\n  }\n\n  cancel(): void {\n    if (this.isEditMode && this.productionId) {\n      this.router.navigate(['/productions', this.productionId]);\n    } else {\n      this.router.navigate(['/productions']);\n    }\n  }\n}","<div class=\"container mt-4\">\n  <div class=\"card shadow\">\n    <div class=\"card-header bg-primary text-white\">\n      <h2 class=\"mb-0\">{{ isEditMode ? 'Edit' : 'New' }} Production</h2>\n    </div>\n    <div class=\"card-body\">\n      <!-- Loading spinner -->\n      <div *ngIf=\"loading\" class=\"text-center my-5\">\n        <mat-spinner diameter=\"50\" class=\"mx-auto\"></mat-spinner>\n        <p class=\"mt-3\">Loading production data...</p>\n      </div>\n\n      <!-- Error message -->\n      <div *ngIf=\"error && !loading\" class=\"alert alert-danger\">\n        {{ error }}\n      </div>\n\n      <form [formGroup]=\"productionForm\" (ngSubmit)=\"onSubmit()\" *ngIf=\"!loading\">\n        <!-- Title -->\n        <div class=\"mb-3\">\n          <mat-form-field appearance=\"outline\" class=\"w-100\">\n            <mat-label>Title</mat-label>\n            <input matInput formControlName=\"title\" placeholder=\"Production Title\" required>\n            <mat-error *ngIf=\"productionForm.get('title')?.errors?.['required']\">Title is required</mat-error>\n          </mat-form-field>\n        </div>\n\n        <!-- Description -->\n        <div class=\"mb-3\">\n          <mat-form-field appearance=\"outline\" class=\"w-100\">\n            <mat-label>Description</mat-label>\n            <textarea matInput formControlName=\"description\" placeholder=\"Production description\" rows=\"4\"></textarea>\n          </mat-form-field>\n        </div>\n\n        <!-- Status -->\n        <div class=\"mb-3\">\n          <mat-form-field appearance=\"outline\" class=\"w-100\">\n            <mat-label>Status</mat-label>\n            <mat-select formControlName=\"status\" required>\n              <mat-option *ngFor=\"let option of statusOptions\" [value]=\"option.value\">\n                {{ option.label }}\n              </mat-option>\n            </mat-select>\n          </mat-form-field>\n        </div>\n\n        <!-- Start Date and End Date -->\n        <div class=\"row\">\n          <div class=\"col-md-6 mb-3\">\n            <mat-form-field appearance=\"outline\" class=\"w-100\">\n              <mat-label>Start Date</mat-label>\n              <input matInput [matDatepicker]=\"startDatePicker\" formControlName=\"startDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"startDatePicker\"></mat-datepicker-toggle>\n              <mat-datepicker #startDatePicker></mat-datepicker>\n            </mat-form-field>\n          </div>\n          <div class=\"col-md-6 mb-3\">\n            <mat-form-field appearance=\"outline\" class=\"w-100\">\n              <mat-label>End Date</mat-label>\n              <input matInput [matDatepicker]=\"endDatePicker\" formControlName=\"endDate\">\n              <mat-datepicker-toggle matSuffix [for]=\"endDatePicker\"></mat-datepicker-toggle>\n              <mat-datepicker #endDatePicker></mat-datepicker>\n            </mat-form-field>\n          </div>\n        </div>\n\n        <!-- Submit and Cancel buttons -->\n        <div class=\"d-flex justify-content-end gap-2 mt-4\">\n          <button mat-stroked-button type=\"button\" (click)=\"cancel()\">Cancel</button>\n          <button mat-raised-button color=\"primary\" type=\"submit\" [disabled]=\"productionForm.invalid || submitting\">\n            <mat-spinner diameter=\"20\" *ngIf=\"submitting\" class=\"me-2\"></mat-spinner>\n            {{ isEditMode ? 'Update' : 'Create' }}\n          </button>\n        </div>\n      </form>\n    </div>\n  </div>\n</div>"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}