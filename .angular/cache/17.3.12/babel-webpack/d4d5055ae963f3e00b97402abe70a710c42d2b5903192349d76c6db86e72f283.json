{"ast":null,"code":"import { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ScriptService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/scripts`;\n  }\n  // Get all scripts\n  getScripts() {\n    return this.http.get(this.apiUrl);\n  }\n  // Get scripts for a specific production\n  getScriptsByProduction(productionId) {\n    return this.http.get(`${environment.apiUrl}/productions/${productionId}/scripts`);\n  }\n  // Get a specific script by ID\n  getScript(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // Create a new script\n  createScript(script) {\n    return this.http.post(this.apiUrl, script);\n  }\n  // Update an existing script\n  updateScript(id, script) {\n    return this.http.put(`${this.apiUrl}/${id}`, script);\n  }\n  // Delete a script\n  deleteScript(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function ScriptService_Factory(t) {\n      return new (t || ScriptService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ScriptService,\n      factory: ScriptService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","ScriptService","constructor","http","apiUrl","getScripts","get","getScriptsByProduction","productionId","getScript","id","createScript","script","post","updateScript","put","deleteScript","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/owenbaldwin/code/owenbaldwin2/claude-lvfx-fe/src/app/core/services/script.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { Script } from '@app/shared/models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ScriptService {\n  private apiUrl = `${environment.apiUrl}/scripts`;\n\n  constructor(private http: HttpClient) { }\n\n  // Get all scripts\n  getScripts(): Observable<Script[]> {\n    return this.http.get<Script[]>(this.apiUrl);\n  }\n\n  // Get scripts for a specific production\n  getScriptsByProduction(productionId: number): Observable<Script[]> {\n    return this.http.get<Script[]>(`${environment.apiUrl}/productions/${productionId}/scripts`);\n  }\n\n  // Get a specific script by ID\n  getScript(id: number): Observable<Script> {\n    return this.http.get<Script>(`${this.apiUrl}/${id}`);\n  }\n\n  // Create a new script\n  createScript(script: Partial<Script>): Observable<Script> {\n    return this.http.post<Script>(this.apiUrl, script);\n  }\n\n  // Update an existing script\n  updateScript(id: number, script: Partial<Script>): Observable<Script> {\n    return this.http.put<Script>(`${this.apiUrl}/${id}`, script);\n  }\n\n  // Delete a script\n  deleteScript(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}"],"mappings":"AAGA,SAASA,WAAW,QAAQ,kBAAkB;;;AAM9C,OAAM,MAAOC,aAAa;EAGxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,UAAU;EAER;EAExC;EACAC,UAAUA,CAAA;IACR,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAW,IAAI,CAACF,MAAM,CAAC;EAC7C;EAEA;EACAG,sBAAsBA,CAACC,YAAoB;IACzC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAW,GAAGN,WAAW,CAACI,MAAM,gBAAgBI,YAAY,UAAU,CAAC;EAC7F;EAEA;EACAC,SAASA,CAACC,EAAU;IAClB,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAS,GAAG,IAAI,CAACF,MAAM,IAAIM,EAAE,EAAE,CAAC;EACtD;EAEA;EACAC,YAAYA,CAACC,MAAuB;IAClC,OAAO,IAAI,CAACT,IAAI,CAACU,IAAI,CAAS,IAAI,CAACT,MAAM,EAAEQ,MAAM,CAAC;EACpD;EAEA;EACAE,YAAYA,CAACJ,EAAU,EAAEE,MAAuB;IAC9C,OAAO,IAAI,CAACT,IAAI,CAACY,GAAG,CAAS,GAAG,IAAI,CAACX,MAAM,IAAIM,EAAE,EAAE,EAAEE,MAAM,CAAC;EAC9D;EAEA;EACAI,YAAYA,CAACN,EAAU;IACrB,OAAO,IAAI,CAACP,IAAI,CAACc,MAAM,CAAO,GAAG,IAAI,CAACb,MAAM,IAAIM,EAAE,EAAE,CAAC;EACvD;;;uBAjCWT,aAAa,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAbpB,aAAa;MAAAqB,OAAA,EAAbrB,aAAa,CAAAsB,IAAA;MAAAC,UAAA,EAFZ;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}