{"ast":null,"code":"import { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductionService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/productions`;\n  }\n  // Get all productions\n  getProductions() {\n    return this.http.get(this.apiUrl);\n  }\n  // Get a specific production by ID\n  getProduction(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // Create a new production\n  createProduction(production) {\n    return this.http.post(this.apiUrl, production);\n  }\n  // Update an existing production\n  updateProduction(id, production) {\n    return this.http.put(`${this.apiUrl}/${id}`, production);\n  }\n  // Delete a production\n  deleteProduction(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function ProductionService_Factory(t) {\n      return new (t || ProductionService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductionService,\n      factory: ProductionService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","ProductionService","constructor","http","apiUrl","getProductions","get","getProduction","id","createProduction","production","post","updateProduction","put","deleteProduction","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/owenbaldwin/code/owenbaldwin2/claude-lvfx-fe/src/app/core/services/production.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { Production } from '@app/shared/models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductionService {\n  private apiUrl = `${environment.apiUrl}/productions`;\n\n  constructor(private http: HttpClient) { }\n\n  // Get all productions\n  getProductions(): Observable<Production[]> {\n    return this.http.get<Production[]>(this.apiUrl);\n  }\n\n  // Get a specific production by ID\n  getProduction(id: number): Observable<Production> {\n    return this.http.get<Production>(`${this.apiUrl}/${id}`);\n  }\n\n  // Create a new production\n  createProduction(production: Partial<Production>): Observable<Production> {\n    return this.http.post<Production>(this.apiUrl, production);\n  }\n\n  // Update an existing production\n  updateProduction(id: number, production: Partial<Production>): Observable<Production> {\n    return this.http.put<Production>(`${this.apiUrl}/${id}`, production);\n  }\n\n  // Delete a production\n  deleteProduction(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}"],"mappings":"AAGA,SAASA,WAAW,QAAQ,kBAAkB;;;AAM9C,OAAM,MAAOC,iBAAiB;EAG5BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,cAAc;EAEZ;EAExC;EACAC,cAAcA,CAAA;IACZ,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAe,IAAI,CAACF,MAAM,CAAC;EACjD;EAEA;EACAG,aAAaA,CAACC,EAAU;IACtB,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAa,GAAG,IAAI,CAACF,MAAM,IAAII,EAAE,EAAE,CAAC;EAC1D;EAEA;EACAC,gBAAgBA,CAACC,UAA+B;IAC9C,OAAO,IAAI,CAACP,IAAI,CAACQ,IAAI,CAAa,IAAI,CAACP,MAAM,EAAEM,UAAU,CAAC;EAC5D;EAEA;EACAE,gBAAgBA,CAACJ,EAAU,EAAEE,UAA+B;IAC1D,OAAO,IAAI,CAACP,IAAI,CAACU,GAAG,CAAa,GAAG,IAAI,CAACT,MAAM,IAAII,EAAE,EAAE,EAAEE,UAAU,CAAC;EACtE;EAEA;EACAI,gBAAgBA,CAACN,EAAU;IACzB,OAAO,IAAI,CAACL,IAAI,CAACY,MAAM,CAAO,GAAG,IAAI,CAACX,MAAM,IAAII,EAAE,EAAE,CAAC;EACvD;;;uBA5BWP,iBAAiB,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAjBlB,iBAAiB;MAAAmB,OAAA,EAAjBnB,iBAAiB,CAAAoB,IAAA;MAAAC,UAAA,EAFhB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}