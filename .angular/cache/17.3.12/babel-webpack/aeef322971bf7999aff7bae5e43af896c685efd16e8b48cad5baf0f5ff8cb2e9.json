{"ast":null,"code":"import { BehaviorSubject } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.currentUserSubject = new BehaviorSubject(null);\n    this.currentUser$ = this.currentUserSubject.asObservable();\n    this.apiUrl = `${environment.apiUrl}/auth`;\n    // Load user from local storage when service starts\n    this.loadUserFromStorage();\n  }\n  loadUserFromStorage() {\n    const userJson = localStorage.getItem('current_user');\n    if (userJson) {\n      try {\n        const user = JSON.parse(userJson);\n        this.currentUserSubject.next(user);\n      } catch (error) {\n        localStorage.removeItem('current_user');\n        localStorage.removeItem('auth_token');\n      }\n    }\n  }\n  login(email, password) {\n    return this.http.post(`${this.apiUrl}/login`, {\n      email,\n      password\n    }).pipe(map(response => {\n      const user = {\n        ...response.user,\n        token: response.token\n      };\n      // Store user and token in local storage\n      localStorage.setItem('current_user', JSON.stringify(user));\n      localStorage.setItem('auth_token', response.token);\n      // Update the current user subject\n      this.currentUserSubject.next(user);\n      return user;\n    }));\n  }\n  register(name, email, password) {\n    return this.http.post(`${this.apiUrl}/register`, {\n      name,\n      email,\n      password\n    }).pipe(map(response => {\n      const user = {\n        ...response.user,\n        token: response.token\n      };\n      // Store user and token in local storage\n      localStorage.setItem('current_user', JSON.stringify(user));\n      localStorage.setItem('auth_token', response.token);\n      // Update the current user subject\n      this.currentUserSubject.next(user);\n      return user;\n    }));\n  }\n  logout() {\n    // Clear local storage and current user\n    localStorage.removeItem('current_user');\n    localStorage.removeItem('auth_token');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/auth/login']);\n  }\n  isAuthenticated() {\n    return !!localStorage.getItem('auth_token');\n  }\n  get currentUser() {\n    return this.currentUserSubject.value;\n  }\n  static {\n    this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["BehaviorSubject","map","environment","AuthService","constructor","http","router","currentUserSubject","currentUser$","asObservable","apiUrl","loadUserFromStorage","userJson","localStorage","getItem","user","JSON","parse","next","error","removeItem","login","email","password","post","pipe","response","token","setItem","stringify","register","name","logout","navigate","isAuthenticated","currentUser","value","i0","ɵɵinject","i1","HttpClient","i2","Router","factory","ɵfac","providedIn"],"sources":["/Users/owenbaldwin/code/owenbaldwin2/claude-lvfx-fe/src/app/core/services/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { BehaviorSubject, Observable, of } from 'rxjs';\nimport { map, tap, catchError } from 'rxjs/operators';\nimport { environment } from '@env/environment';\nimport { Router } from '@angular/router';\n\ninterface User {\n  id: number;\n  email: string;\n  name: string;\n  token?: string;\n}\n\ninterface AuthResponse {\n  user: User;\n  token: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private currentUserSubject = new BehaviorSubject<User | null>(null);\n  public currentUser$ = this.currentUserSubject.asObservable();\n  private apiUrl = `${environment.apiUrl}/auth`;\n\n  constructor(\n    private http: HttpClient,\n    private router: Router\n  ) {\n    // Load user from local storage when service starts\n    this.loadUserFromStorage();\n  }\n\n  private loadUserFromStorage(): void {\n    const userJson = localStorage.getItem('current_user');\n    if (userJson) {\n      try {\n        const user = JSON.parse(userJson);\n        this.currentUserSubject.next(user);\n      } catch (error) {\n        localStorage.removeItem('current_user');\n        localStorage.removeItem('auth_token');\n      }\n    }\n  }\n\n  login(email: string, password: string): Observable<User> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/login`, { email, password })\n      .pipe(\n        map(response => {\n          const user = { ...response.user, token: response.token };\n          \n          // Store user and token in local storage\n          localStorage.setItem('current_user', JSON.stringify(user));\n          localStorage.setItem('auth_token', response.token);\n          \n          // Update the current user subject\n          this.currentUserSubject.next(user);\n          return user;\n        })\n      );\n  }\n\n  register(name: string, email: string, password: string): Observable<User> {\n    return this.http.post<AuthResponse>(`${this.apiUrl}/register`, { name, email, password })\n      .pipe(\n        map(response => {\n          const user = { ...response.user, token: response.token };\n          \n          // Store user and token in local storage\n          localStorage.setItem('current_user', JSON.stringify(user));\n          localStorage.setItem('auth_token', response.token);\n          \n          // Update the current user subject\n          this.currentUserSubject.next(user);\n          return user;\n        })\n      );\n  }\n\n  logout(): void {\n    // Clear local storage and current user\n    localStorage.removeItem('current_user');\n    localStorage.removeItem('auth_token');\n    this.currentUserSubject.next(null);\n    this.router.navigate(['/auth/login']);\n  }\n\n  isAuthenticated(): boolean {\n    return !!localStorage.getItem('auth_token');\n  }\n\n  get currentUser(): User | null {\n    return this.currentUserSubject.value;\n  }\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}