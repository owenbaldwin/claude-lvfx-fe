{"ast":null,"code":"import { environment } from '@env/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductionUserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = `${environment.apiUrl}/production-users`;\n  }\n  // Get all production users\n  getProductionUsers() {\n    return this.http.get(this.apiUrl);\n  }\n  // Get production users for a specific production\n  getProductionUsersByProduction(productionId) {\n    return this.http.get(`${environment.apiUrl}/productions/${productionId}/users`);\n  }\n  // Get production users for a specific user\n  getProductionsByUser(userId) {\n    return this.http.get(`${environment.apiUrl}/users/${userId}/productions`);\n  }\n  // Get a specific production user by ID\n  getProductionUser(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  // Create a new production user\n  createProductionUser(productionUser) {\n    return this.http.post(this.apiUrl, productionUser);\n  }\n  // Update an existing production user\n  updateProductionUser(id, productionUser) {\n    return this.http.put(`${this.apiUrl}/${id}`, productionUser);\n  }\n  // Delete a production user\n  deleteProductionUser(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`);\n  }\n  static {\n    this.ɵfac = function ProductionUserService_Factory(t) {\n      return new (t || ProductionUserService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductionUserService,\n      factory: ProductionUserService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["environment","ProductionUserService","constructor","http","apiUrl","getProductionUsers","get","getProductionUsersByProduction","productionId","getProductionsByUser","userId","getProductionUser","id","createProductionUser","productionUser","post","updateProductionUser","put","deleteProductionUser","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/Users/owenbaldwin/code/owenbaldwin2/claude-lvfx-fe/src/app/core/services/production-user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { environment } from '@env/environment';\nimport { ProductionUser } from '@app/shared/models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductionUserService {\n  private apiUrl = `${environment.apiUrl}/production-users`;\n\n  constructor(private http: HttpClient) { }\n\n  // Get all production users\n  getProductionUsers(): Observable<ProductionUser[]> {\n    return this.http.get<ProductionUser[]>(this.apiUrl);\n  }\n\n  // Get production users for a specific production\n  getProductionUsersByProduction(productionId: number): Observable<ProductionUser[]> {\n    return this.http.get<ProductionUser[]>(`${environment.apiUrl}/productions/${productionId}/users`);\n  }\n\n  // Get production users for a specific user\n  getProductionsByUser(userId: number): Observable<ProductionUser[]> {\n    return this.http.get<ProductionUser[]>(`${environment.apiUrl}/users/${userId}/productions`);\n  }\n\n  // Get a specific production user by ID\n  getProductionUser(id: number): Observable<ProductionUser> {\n    return this.http.get<ProductionUser>(`${this.apiUrl}/${id}`);\n  }\n\n  // Create a new production user\n  createProductionUser(productionUser: Partial<ProductionUser>): Observable<ProductionUser> {\n    return this.http.post<ProductionUser>(this.apiUrl, productionUser);\n  }\n\n  // Update an existing production user\n  updateProductionUser(id: number, productionUser: Partial<ProductionUser>): Observable<ProductionUser> {\n    return this.http.put<ProductionUser>(`${this.apiUrl}/${id}`, productionUser);\n  }\n\n  // Delete a production user\n  deleteProductionUser(id: number): Observable<void> {\n    return this.http.delete<void>(`${this.apiUrl}/${id}`);\n  }\n}"],"mappings":"AAGA,SAASA,WAAW,QAAQ,kBAAkB;;;AAM9C,OAAM,MAAOC,qBAAqB;EAGhCC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,GAAGJ,WAAW,CAACI,MAAM,mBAAmB;EAEjB;EAExC;EACAC,kBAAkBA,CAAA;IAChB,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAmB,IAAI,CAACF,MAAM,CAAC;EACrD;EAEA;EACAG,8BAA8BA,CAACC,YAAoB;IACjD,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAmB,GAAGN,WAAW,CAACI,MAAM,gBAAgBI,YAAY,QAAQ,CAAC;EACnG;EAEA;EACAC,oBAAoBA,CAACC,MAAc;IACjC,OAAO,IAAI,CAACP,IAAI,CAACG,GAAG,CAAmB,GAAGN,WAAW,CAACI,MAAM,UAAUM,MAAM,cAAc,CAAC;EAC7F;EAEA;EACAC,iBAAiBA,CAACC,EAAU;IAC1B,OAAO,IAAI,CAACT,IAAI,CAACG,GAAG,CAAiB,GAAG,IAAI,CAACF,MAAM,IAAIQ,EAAE,EAAE,CAAC;EAC9D;EAEA;EACAC,oBAAoBA,CAACC,cAAuC;IAC1D,OAAO,IAAI,CAACX,IAAI,CAACY,IAAI,CAAiB,IAAI,CAACX,MAAM,EAAEU,cAAc,CAAC;EACpE;EAEA;EACAE,oBAAoBA,CAACJ,EAAU,EAAEE,cAAuC;IACtE,OAAO,IAAI,CAACX,IAAI,CAACc,GAAG,CAAiB,GAAG,IAAI,CAACb,MAAM,IAAIQ,EAAE,EAAE,EAAEE,cAAc,CAAC;EAC9E;EAEA;EACAI,oBAAoBA,CAACN,EAAU;IAC7B,OAAO,IAAI,CAACT,IAAI,CAACgB,MAAM,CAAO,GAAG,IAAI,CAACf,MAAM,IAAIQ,EAAE,EAAE,CAAC;EACvD;;;uBAtCWX,qBAAqB,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAArBtB,qBAAqB;MAAAuB,OAAA,EAArBvB,qBAAqB,CAAAwB,IAAA;MAAAC,UAAA,EAFpB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}