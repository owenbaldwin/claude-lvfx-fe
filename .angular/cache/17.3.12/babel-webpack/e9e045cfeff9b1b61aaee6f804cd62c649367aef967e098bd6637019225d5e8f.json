{"ast":null,"code":"import { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthInterceptor {\n  constructor(router) {\n    this.router = router;\n  }\n  intercept(request, next) {\n    // Get the auth token from local storage\n    const token = localStorage.getItem('auth_token');\n    // Clone the request and add the token\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n    return next.handle(request).pipe(catchError(error => {\n      // Handle 401 Unauthorized errors\n      if (error.status === 401) {\n        // Clear local storage and redirect to login\n        localStorage.removeItem('auth_token');\n        this.router.navigate(['/auth/login']);\n      }\n      return throwError(() => error);\n    }));\n  }\n  static {\n    this.ɵfac = function AuthInterceptor_Factory(t) {\n      return new (t || AuthInterceptor)(i0.ɵɵinject(i1.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthInterceptor,\n      factory: AuthInterceptor.ɵfac\n    });\n  }\n}","map":{"version":3,"names":["throwError","catchError","AuthInterceptor","constructor","router","intercept","request","next","token","localStorage","getItem","clone","setHeaders","Authorization","handle","pipe","error","status","removeItem","navigate","i0","ɵɵinject","i1","Router","factory","ɵfac"],"sources":["/Users/owenbaldwin/code/owenbaldwin2/claude-lvfx-fe/src/app/core/interceptors/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpErrorResponse\n} from '@angular/common/http';\nimport { Observable, throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private router: Router) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n    // Get the auth token from local storage\n    const token = localStorage.getItem('auth_token');\n\n    // Clone the request and add the token\n    if (token) {\n      request = request.clone({\n        setHeaders: {\n          Authorization: `Bearer ${token}`\n        }\n      });\n    }\n\n    return next.handle(request).pipe(\n      catchError((error: HttpErrorResponse) => {\n        // Handle 401 Unauthorized errors\n        if (error.status === 401) {\n          // Clear local storage and redirect to login\n          localStorage.removeItem('auth_token');\n          this.router.navigate(['/auth/login']);\n        }\n        return throwError(() => error);\n      })\n    );\n  }\n}"],"mappings":"AAQA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAI3C,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IACxD;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAEhD;IACA,IAAIF,KAAK,EAAE;MACTF,OAAO,GAAGA,OAAO,CAACK,KAAK,CAAC;QACtBC,UAAU,EAAE;UACVC,aAAa,EAAE,UAAUL,KAAK;;OAEjC,CAAC;IACJ;IAEA,OAAOD,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC,CAACS,IAAI,CAC9Bd,UAAU,CAAEe,KAAwB,IAAI;MACtC;MACA,IAAIA,KAAK,CAACC,MAAM,KAAK,GAAG,EAAE;QACxB;QACAR,YAAY,CAACS,UAAU,CAAC,YAAY,CAAC;QACrC,IAAI,CAACd,MAAM,CAACe,QAAQ,CAAC,CAAC,aAAa,CAAC,CAAC;MACvC;MACA,OAAOnB,UAAU,CAAC,MAAMgB,KAAK,CAAC;IAChC,CAAC,CAAC,CACH;EACH;;;uBA5BWd,eAAe,EAAAkB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAfrB,eAAe;MAAAsB,OAAA,EAAftB,eAAe,CAAAuB;IAAA;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}