{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nexport class AuthGuard {\n  constructor(router) {\n    this.router = router;\n  }\n  canActivate(route, state) {\n    // Check if user is logged in by looking for the token\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      // Additional checks could be added here\n      // For example, check if token is expired by decoding JWT\n      return true;\n    }\n    // If not authenticated, redirect to login page\n    this.router.navigate(['/auth/login'], {\n      queryParams: {\n        returnUrl: state.url\n      }\n    });\n    return false;\n  }\n  static {\n    this.ɵfac = function AuthGuard_Factory(t) {\n      return new (t || AuthGuard)(i0.ɵɵinject(i1.Router));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthGuard,\n      factory: AuthGuard.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["AuthGuard","constructor","router","canActivate","route","state","token","localStorage","getItem","navigate","queryParams","returnUrl","url","i0","ɵɵinject","i1","Router","factory","ɵfac","providedIn"],"sources":["/Users/owenbaldwin/code/owenbaldwin2/claude-lvfx-fe/src/app/core/guards/auth.guard.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { \n  CanActivate, \n  ActivatedRouteSnapshot, \n  RouterStateSnapshot, \n  Router \n} from '@angular/router';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthGuard implements CanActivate {\n  \n  constructor(private router: Router) {}\n  \n  canActivate(\n    route: ActivatedRouteSnapshot,\n    state: RouterStateSnapshot\n  ): boolean {\n    // Check if user is logged in by looking for the token\n    const token = localStorage.getItem('auth_token');\n    \n    if (token) {\n      // Additional checks could be added here\n      // For example, check if token is expired by decoding JWT\n      return true;\n    }\n    \n    // If not authenticated, redirect to login page\n    this.router.navigate(['/auth/login'], { queryParams: { returnUrl: state.url }});\n    return false;\n  }\n}"],"mappings":";;AAWA,OAAM,MAAOA,SAAS;EAEpBC,YAAoBC,MAAc;IAAd,KAAAA,MAAM,GAANA,MAAM;EAAW;EAErCC,WAAWA,CACTC,KAA6B,EAC7BC,KAA0B;IAE1B;IACA,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;IAEhD,IAAIF,KAAK,EAAE;MACT;MACA;MACA,OAAO,IAAI;IACb;IAEA;IACA,IAAI,CAACJ,MAAM,CAACO,QAAQ,CAAC,CAAC,aAAa,CAAC,EAAE;MAAEC,WAAW,EAAE;QAAEC,SAAS,EAAEN,KAAK,CAACO;MAAG;IAAE,CAAC,CAAC;IAC/E,OAAO,KAAK;EACd;;;uBApBWZ,SAAS,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,MAAA;IAAA;EAAA;;;aAAThB,SAAS;MAAAiB,OAAA,EAATjB,SAAS,CAAAkB,IAAA;MAAAC,UAAA,EAFR;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}